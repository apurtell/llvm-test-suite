##=== TEST.dsgraph.report - Report description for dsgraph -----*- perl -*-===##
#
# This file defines a report to be generated for the dsgraph test.
#
##===----------------------------------------------------------------------===##

# Helper function
sub Ratio {
  my ($Cols, $Col) = @_;
  if ($Cols->[$Col-2] ne "*" and
      $Cols->[$Col-2] != "0") {
    return $Cols->[$Col-1]/$Cols->[$Col-2];
  } else {
    return "n/a";
  }
}

# Sort by total analyze time
$SortCol = 7;

# Sort in descending order
$SortReverse = 1;

%NameMap = (
            treeadd   => 'Olden-treeadd',
            bisort    => 'Olden-bisort',
            mst       => 'Olden-mst',
            perimeter => 'Olden-perimeter',
            health    => 'Olden-health',
            tsp       => 'Olden-tsp',
            power     => 'Olden-power',
            em3d      => 'Olden-em3d',
            voronoi   => 'Olden-voronoi',
            bh        => 'Olden-bh',

            ks        => 'ptrdist-ks',
            anagram   => 'ptrdist-anagram',
            yacr2     => 'ptrdist-yacr2',
            ft        => 'ptrdist-ft',
            bc        => 'ptrdist-bc');

@LatexColumns = (0, 1, 26, 19, # Program, LOC, #Instrs, MaxSCC
                 4, 5, 6, 7,   # Execution times
                 13,           # Memory BU+TD
                 16, 17,       # Total, Max Nodes
                 15);          # NumFolded

# These are the columns for the report.  The first entry is the header for the
# column, the second is the regex to use to match the value.  Empty list create
# seperators, and closures may be put in for custom processing.
(
# Name
            ["Name:" , '\'([^\']+)\' Program'],
            ["LOC:"  , 'LOC: *([0-9]+)'],
            [],
# Times
            ["Anlyz:", '([0-9.]+) \([^)]+\)[ 0-9]+TOTAL'],
            ["LocTm:", '([0-9.]+) \([^)]+\)[ 0-9]+Local'],
            ["BUTim:", '([0-9.]+) \([^)]+\)[ 0-9]+Bottom'],
            ["TDTim:", '([0-9.]+) \([^)]+\)[ 0-9]+Top'],
            ["SumTm:", sub { return SumCols(@_, 3); }],
            ["SteTm:", '([0-9.]+) \([^)]+\)[ 0-9]+Steensgaard'],
            [],
# Sizes
            ["LcSize:" , '([0-9]+)  Local'],
            ["BUSize:" , '([0-9]+)  Bottom-up'],
            ["TDSize:" , '([0-9]+)  Top-down'],
            ["BUTDSz:" , sub { return SumCols(@_, 3); }],
            [],
# Misc stuff
            ["NumFold" , '([0-9]+).*Number of folded nodes '],
            ["NumNodes", 'Graphs contain \\[([0-9+]+)\\] nodes total'],
            ["MaxSz"   , '([0-9]+).*Maximum graph size'],
            ["GlobGr"  , '\\.GlobalsGraph\\.dot\'... \\[([0-9+]+)\\]'],
            ["MaxSCC"  , '([0-9]+).*Maximum SCC Size in Call Graph'],
            [],
            ["Loads"   , '([0-9]+).*Number of Load insts'],
            ["Store"   , '([0-9]+).*Number of Store insts'],
            ["Calls"   , '([0-9]+).*Number of Call insts'],
            ["Allca"   , '([0-9]+).*Number of Alloca insts'],
            ["Mallc"   , '([0-9]+).*Number of Malloc insts'],
            ["Sum"   , sub { return SumCols(@_, 5); }],
            [],
            ["num/ind" , '([0-9]+).*number of indirect call sites'],
            ["indcallee",'([0-9]+).*number of callee functions at'],
            ["ratio"   , \&Ratio],  # indcallee / num/ind
            []
           );
