##-----------------------------------------------------------*-Makefile-*-
#                   test/Programs/MultiSource/Makefile.multisrc
#
# This makefile should be used by subdirectories that have multiple source files
# to be linked together.  This contains all of the common makefile code required
# to link an application together based on the $(Source) variable.
#
# Variables to be defined before including this makefile:
#
# 1. LEVEL - Must be set as per normal semantics: The depth from the top of tree
#
##------------------------------------------------------------------------

LCCFLAGS := $(CFLAGS) $(CPPFLAGS)
PROGRAMS_TO_TEST := $(PROG)

## LLVM bytecode libraries that must be linked with an application
# FIXME: LIBS SHOULD BE SPECIFIED
LIBS = -lm

all:: 
	@echo "-----> Running '$(PROG)' test"

include $(LEVEL)/test/Programs/Makefile.programs

# Figure out what object files we want to build...
LObjs    := $(sort $(addsuffix .bc, $(basename $(Source))))
LObjects := $(addprefix Output/,$(LObjs))

NObjs    := $(sort $(addsuffix .o, $(basename $(Source))))
NObjects := $(addprefix Output/,$(NObjs))

.PRECIOUS: $(LObjects) $(NObjects) Output/%.linked.bc

Output/%.o: %.c Output/.dir
	$(CC) $(CPPFLAGS) -O $(CFLAGS) -c $< -o $@

# Output/*.linked.bc is all of the bytecode files of the program linked together
# without any libraries linked in...
#
Output/%.linked.bc: $(LObjects)
	$(LLINK) -f $(LObjects) | opt -funcresolve > $@

# Link the program to the libraries it uses, then perform postlink
# optimization...
Output/%.llvm Output/%.llvm.bc: Output/%.linked.bc
	$(LGCCLD) $< -lgcc -lc $(LIBS) -o $(<:.linked.bc=.llvm)

Output/%.native: $(NObjects)
	$(CC) -o $@ $(NObjects) $(LDFLAGS) $(CFLAGS)



# Hackish productions that are useful for testing stuff.
final: Output/$(PROG).llvm
	-ls -l Output/$(PROG).llvm.bc $(HOME)/LLVMPrograms/$(PROG).llvm.bc
	-cp $(HOME)/LLVMPrograms/$(PROG).llvm.bc $(HOME)/LLVMPrograms/$(PROG).llvm.old.bc
	cp Output/$(PROG).llvm.bc $(HOME)/LLVMPrograms
	

ds: Output/$(PROG).linked.bc
	$(LANALYZE) -datastructure $< -t

%.ps: %.dot
	dot -Tps < $< > $@

typesafe: Output/$(PROG).linked.bc
	$(LANALYZE) -unsafepointertypes $<


#
# If performing pool allocation tests, add a bunch of targets to the makefile...
#
ifdef ENABLE_POOLALLOC

.PRECIOUS: Output/%.poolalloc.bc

N32Objects := $(addprefix Output/n32/,$(NObjs))
.PRECIOUS: $(N32Objects) Output/n32/.dir
Output/%.native32: $(N32Objects)
	$(CC) -o $@ $(N32Objects) $(LDFLAGS)

Output/n32/%.o: %.c Output/n32/.dir
	$(CC) -DTORONTO -g -xarch=v8 -c $< -o $@

.PRECIOUS: Output/%.poolalloc8.llvm.bc Output/%.poolalloc16.llvm.bc Output/%.poolalloc32.llvm.bc Output/%.poolalloc16nle.llvm.bc Output/%.poolalloc32nle.llvm.bc

# Pool allocate memory objects if possible
Output/%.poolalloc8.llvm.bc: Output/%.linked.bc $(LOPT)
	$(LOPT) -internalize -poolalloc -ptrsize=8 -globaldce -instcombine -die -gcse < $< -o $@ -f
Output/%.poolalloc16.llvm.bc: Output/%.linked.bc $(LOPT)
	$(LOPT) -internalize -poolalloc -ptrsize=16 -globaldce -instcombine -die -gcse < $< -o $@ -f
Output/%.poolalloc32.llvm.bc: Output/%.linked.bc $(LOPT)
	$(LOPT) -internalize -poolalloc -ptrsize=32 -globaldce -instcombine -die -gcse < $< -o $@ -f

Output/%.poolalloc8nle.llvm.bc: Output/%.linked.bc $(LOPT)
	$(LOPT) -internalize -poolalloc -no-pool-load-elim -ptrsize=8 -globaldce -instcombine -die < $< -o $@ -f
Output/%.poolalloc16nle.llvm.bc: Output/%.linked.bc $(LOPT)
	$(LOPT) -internalize -poolalloc -no-pool-load-elim -ptrsize=16 -globaldce -instcombine -die < $< -o $@ -f
Output/%.poolalloc32nle.llvm.bc: Output/%.linked.bc $(LOPT)
	$(LOPT) -internalize -poolalloc -no-pool-load-elim -ptrsize=32 -globaldce -instcombine -die < $< -o $@ -f



# Link the pool allocator into the programs...
LLC_PROG_LIBS += /home/vadve/lattner/PoolAllocated/PoolAllocator.o

.PRECIOUS: Output/%.out-pa Output/%.diff-pa
Output/%.out-pa: Output/%.llc
	-$< > $@ 2>&1

Output/%.diff-pa: Output/%.out-pa Output/%.out-llc
	@echo "DIFFING pool allocated vs nonpoolallocated output:"
	diff $< $(<:%-pa=%-llc)
	@touch $@

all:: Output/$(PROG).poolalloc32.diff-pa Output/$(PROG).poolalloc32.llc Output/$(PROG).poolalloc16.llc Output/$(PROG).poolalloc32nle.llc Output/$(PROG).poolalloc16nle.llc Output/$(PROG).native32

timing: all
	$(TIMEPROG) 'Normal LLC build...' Output/$(PROG).llc
	$(TIMEPROG) '32 bit pool alloc NLE...' Output/$(PROG).poolalloc32nle.llc
	$(TIMEPROG) '32 bit pool allocation...' Output/$(PROG).poolalloc32.llc
	$(TIMEPROG) '16 bit pool alloc NLE...' Output/$(PROG).poolalloc16nle.llc
	$(TIMEPROG) '16 bit pool allocation...' Output/$(PROG).poolalloc16.llc

	$(TIMEPROG) 'Native Sun CC 64...' Output/$(PROG).native
	$(TIMEPROG) 'Native Sun CC 32...' Output/$(PROG).native32

endif
